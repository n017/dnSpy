<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error1" xml:space="preserve">
    <value>ERROR: {0}</value>
  </data>
  <data name="Examples" xml:space="preserve">
    <value>Examples:
  {0} -o c:\out\path C:\some\path
      Decompiles all .NET files in the above directory and saves files to C:\out\path
  {0} -o c:\out\path -r C:\some\path
      Decompiles all .NET files in the above directory and all sub directories
  {0} -o C:\out\path C:\some\path\*.dll
      Decompiles all *.dll .NET files in the above directory and saves files to C:\out\path
  {0} --md 0x06000123 file.dll
      Decompiles the member with token 0x06000123
  {0} -t system.int32 --gac-file "mscorlib, Version=4.0.0.0"
      Decompiles System.Int32 from mscorlib</value>
  </data>
  <data name="FileOrDirDoesNotExist" xml:space="preserve">
    <value>File/directory '{0}' doesn't exist</value>
  </data>
  <data name="InvalidOption" xml:space="preserve">
    <value>Invalid option: {0}</value>
  </data>
  <data name="InvalidSolutionName" xml:space="preserve">
    <value>.sln name ({0}) must be relative to project directory</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>Invalid metadata token</value>
  </data>
  <data name="InvalidVSVersion" xml:space="preserve">
    <value>Invalid Visual Studio version: {0}</value>
  </data>
  <data name="LanguageDoesNotExist" xml:space="preserve">
    <value>Language '{0}' doesn't exist</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Languages:</value>
  </data>
  <data name="LanguageXDoesNotExist" xml:space="preserve">
    <value>Language {0} does not exist</value>
  </data>
  <data name="MissingAsmSearchPath" xml:space="preserve">
    <value>Missing assembly search path</value>
  </data>
  <data name="MissingDotNetFilename" xml:space="preserve">
    <value>Missing .NET filename</value>
  </data>
  <data name="MissingLanguageName" xml:space="preserve">
    <value>Missing language name</value>
  </data>
  <data name="MissingMDToken" xml:space="preserve">
    <value>Missing metadata token</value>
  </data>
  <data name="MissingNumberOfThreads" xml:space="preserve">
    <value>Missing number of threads</value>
  </data>
  <data name="MissingOptions" xml:space="preserve">
    <value>No options specified</value>
  </data>
  <data name="MissingOutputDir" xml:space="preserve">
    <value>Missing output directory</value>
  </data>
  <data name="MissingSolutionName" xml:space="preserve">
    <value>Missing .sln name</value>
  </data>
  <data name="MissingVSVersion" xml:space="preserve">
    <value>Missing Visual Studio version</value>
  </data>
  <data name="NoLanguagesFound" xml:space="preserve">
    <value>No languages were found. Make sure that the language dll files exist in the same folder as this program.</value>
  </data>
  <data name="NotDotNetFile" xml:space="preserve">
    <value>{0} is not a .NET file</value>
  </data>
  <data name="OnlyOneFileCanBeDecompiled" xml:space="preserve">
    <value>Only one file can be decompiled when using --md</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>{0} [options] [fileOrDir1] [fileOrDir2] [...]

  --asm-path path    assembly search path. Paths can be separated with '{1}' or you can use multiple --asm-path's
  --user-gac path    user GAC path. Paths can be separated with '{1}' or you can use multiple --user-gac's
  --no-gac     don't use the GAC to look up assemblies. Useful with --no-stdlib
  --no-stdlib  projects don't reference mscorlib
  --no-sln     don't create a .sln file
  --sln-name name   name of the .sln file
  --threads N  number of worker threads. Default is to use one thread per CPU core
  --no-resources   don't unpack resources
  --no-resx    don't create .resx files
  --no-baml    don't decompile baml to xaml
  --vs N       Visual Studio version, 2005, 2008, ..., 2015
  --project-guid N    project guid
  -t name      decompile the type with the specified name to stdout. Either Namespace.Name or Name, case insensitive
  --type name  same as -t
  --md N       decompile the member with metadata token N to stdout
  --gac-file N decompile an assembly from the GAC. Use full assembly name to use an exact version.
  -r           recursive search for .NET files to decompile
  -o outdir    output directory
  -l lang      set language, default is C#. Guids can be used.</value>
  </data>
  <data name="MissingUserGacPath" xml:space="preserve">
    <value>Missing user GAC path</value>
  </data>
  <data name="InvalidMemberToDecompile" xml:space="preserve">
    <value>Only types, methods, fields, events and properties can be decompiled</value>
  </data>
  <data name="CouldNotFindTypeX" xml:space="preserve">
    <value>Type {0} couldn't be found</value>
  </data>
  <data name="CouldNotResolveGacFileX" xml:space="preserve">
    <value>Couldn't resolve GAC assembly '{0}'</value>
  </data>
  <data name="MissingGacFile" xml:space="preserve">
    <value>Missing GAC assembly name</value>
  </data>
  <data name="MissingTypeName" xml:space="preserve">
    <value>Missing full name of type</value>
  </data>
  <data name="LanguageXDoesNotSupportProjects" xml:space="preserve">
    <value>Language {0} doesn't support creating project files</value>
  </data>
  <data name="LanguageOptions" xml:space="preserve">
    <value>Language options:</value>
  </data>
  <data name="LanguageOptionsDesc" xml:space="preserve">
    <value>All boolean options can be disabled by using 'no-' or 'dont-', eg. --dont-sort-members</value>
  </data>
  <data name="MissingOptionArgument" xml:space="preserve">
    <value>Missing option argument</value>
  </data>
  <data name="InvalidGuid" xml:space="preserve">
    <value>Invalid GUID</value>
  </data>
</root>